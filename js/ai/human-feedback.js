/**
 * Bayerisches Schafkopf - Human-in-the-Loop AI Training
 * Erm√∂glicht menschliches Feedback f√ºr bessere AI-Strategien
 * Interactive Learning durch Spieler-Anmerkungen
 */

import { botManager } from './bot-manager.js';

/**
 * Human Feedback Learning System
 * Verbessert AI durch Spieler-Feedback
 */
export class HumanFeedbackLearning {
    constructor() {
        // Feedback-Speicher
        this.feedbackHistory = [];
        this.pendingFeedback = new Map(); // trick -> feedback
        
        // Learning-Parameter
        this.feedbackWeight = 2.0; // Menschliches Feedback z√§hlt doppelt
        this.suggestionReward = 10; // Bonus f√ºr befolgte Vorschl√§ge
        this.negativeWeight = -5; // Malus f√ºr schlechte Z√ºge
        
        // UI-Elemente
        this.feedbackUI = null;
        this.isEnabled = false;
        
        console.log('üßë‚Äçüè´ Human-in-the-Loop Learning initialisiert');
    }
    
    /**
     * Aktiviert das Feedback-System
     */
    enable() {
        this.isEnabled = true;
        this.createFeedbackUI();
        console.log('‚úÖ Human Feedback Learning aktiviert');
    }
    
    /**
     * Deaktiviert das Feedback-System
     */
    disable() {
        this.isEnabled = false;
        this.removeFeedbackUI();
        console.log('‚ùå Human Feedback Learning deaktiviert');
    }
    
    /**
     * Registriert AI-Zug f√ºr m√∂gliches Feedback
     */
    recordAIMove(playerId, selectedCard, playableCards, gameContext) {
        if (!this.isEnabled) return;
        
        const moveRecord = {\n            playerId,\n            selectedCard,\n            playableCards: [...playableCards],\n            gameContext: {...gameContext},\n            timestamp: Date.now(),\n            trickNumber: gameContext.trickNumber\n        };\n        \n        // Speichere f√ºr m√∂gliches Feedback\n        this.pendingFeedback.set(`trick_${gameContext.trickNumber}_player_${playerId}`, moveRecord);\n        \n        // Zeige Feedback-UI f√ºr diesen Zug\n        this.showFeedbackForMove(moveRecord);\n    }\n    \n    /**\n     * Verarbeitet positives Feedback\n     */\n    recordPositiveFeedback(moveKey, comment = '') {\n        const move = this.pendingFeedback.get(moveKey);\n        if (!move) return;\n        \n        const feedback = {\n            type: 'positive',\n            move,\n            comment,\n            timestamp: Date.now(),\n            reward: +8 // Positive Belohnung\n        };\n        \n        this.applyFeedback(feedback);\n        this.feedbackHistory.push(feedback);\n        \n        console.log(`üëç Positives Feedback f√ºr ${move.selectedCard.suit} ${move.selectedCard.value}`);\n        this.showFeedbackMessage('üëç Zug als gut markiert!', 'success');\n    }\n    \n    /**\n     * Verarbeitet negatives Feedback\n     */\n    recordNegativeFeedback(moveKey, comment = '') {\n        const move = this.pendingFeedback.get(moveKey);\n        if (!move) return;\n        \n        const feedback = {\n            type: 'negative',\n            move,\n            comment,\n            timestamp: Date.now(),\n            reward: -10 // Negative Belohnung\n        };\n        \n        this.applyFeedback(feedback);\n        this.feedbackHistory.push(feedback);\n        \n        console.log(`üëé Negatives Feedback f√ºr ${move.selectedCard.suit} ${move.selectedCard.value}`);\n        this.showFeedbackMessage('üëé Zug als schlecht markiert!', 'warning');\n    }\n    \n    /**\n     * Verarbeitet Vorschlag f√ºr besseren Zug\n     */\n    recordAlternativeSuggestion(moveKey, suggestedCard, reason = '') {\n        const move = this.pendingFeedback.get(moveKey);\n        if (!move) return;\n        \n        const feedback = {\n            type: 'suggestion',\n            move,\n            suggestedCard,\n            reason,\n            timestamp: Date.now(),\n            reward: -8 // Bestrafung f√ºr schlechten Zug\n        };\n        \n        this.applyFeedback(feedback);\n        this.feedbackHistory.push(feedback);\n        \n        // Lerne auch den besseren Zug\n        this.learnSuggestedMove(move, suggestedCard);\n        \n        console.log(`üí° Vorschlag: ${suggestedCard.suit} ${suggestedCard.value} statt ${move.selectedCard.suit} ${move.selectedCard.value}`);\n        this.showFeedbackMessage(`üí° Vorschlag registriert: ${suggestedCard.suit} ${suggestedCard.value}!`, 'info');\n    }\n    \n    /**\n     * Wendet Feedback auf AI-Learning an\n     */\n    applyFeedback(feedback) {\n        const aiData = botManager.aiPlayers.get(feedback.move.playerId);\n        if (!aiData || aiData.type !== 'qlearning') return;\n        \n        const ai = aiData.instance;\n        \n        // State und Action aus dem Move\n        const state = ai.encodeGameState(feedback.move.gameContext);\n        const action = ai.encodeAction(feedback.move.selectedCard);\n        \n        // Verst√§rktes Learning durch menschliches Feedback\n        const enhancedReward = feedback.reward * this.feedbackWeight;\n        \n        // Direktes Q-Value Update\n        const currentQ = ai.getQValue(state, action);\n        const newQ = currentQ + (ai.learningRate * enhancedReward);\n        ai.setQValue(state, action, newQ);\n        \n        console.log(`üìö Q-Update durch Feedback: ${currentQ.toFixed(3)} ‚Üí ${newQ.toFixed(3)} (Œî${enhancedReward})`);\n    }\n    \n    /**\n     * Lernt von vorgeschlagenem besseren Zug\n     */\n    learnSuggestedMove(originalMove, suggestedCard) {\n        const aiData = botManager.aiPlayers.get(originalMove.playerId);\n        if (!aiData || aiData.type !== 'qlearning') return;\n        \n        const ai = aiData.instance;\n        \n        // State und bessere Action\n        const state = ai.encodeGameState(originalMove.gameContext);\n        const betterAction = ai.encodeAction(suggestedCard);\n        \n        // Belohne den besseren Zug\n        const currentQ = ai.getQValue(state, betterAction);\n        const newQ = currentQ + (ai.learningRate * this.suggestionReward);\n        ai.setQValue(state, betterAction, newQ);\n        \n        console.log(`üéØ Besserer Zug gelernt: ${suggestedCard.suit} ${suggestedCard.value} (Q: ${newQ.toFixed(3)})`);\n    }\n    \n    /**\n     * Erstellt das Feedback-UI\n     */\n    createFeedbackUI() {\n        // Container f√ºr Feedback-UI\n        const feedbackContainer = document.createElement('div');\n        feedbackContainer.id = 'feedback-container';\n        feedbackContainer.className = 'feedback-container';\n        feedbackContainer.innerHTML = `\n            <div class=\"feedback-header\">\n                <h3>üßë‚Äçüè´ AI-Training</h3>\n                <button class=\"btn-close\" onclick=\"humanFeedback.disable()\">√ó</button>\n            </div>\n            <div class=\"feedback-content\" id=\"feedback-content\">\n                <p>Spiele ein paar Z√ºge - dann kannst du die AI-Entscheidungen bewerten!</p>\n            </div>\n            <div class=\"feedback-stats\" id=\"feedback-stats\">\n                Feedback gegeben: <span id=\"feedback-count\">0</span>\n            </div>\n        `;\n        \n        // CSS-Styles hinzuf√ºgen\n        const style = document.createElement('style');\n        style.textContent = `\n            .feedback-container {\n                position: fixed;\n                top: 100px;\n                right: 20px;\n                width: 300px;\n                background: rgba(255, 255, 255, 0.95);\n                border: 2px solid #007bff;\n                border-radius: 8px;\n                box-shadow: 0 4px 8px rgba(0,0,0,0.2);\n                z-index: 1000;\n                font-family: Arial, sans-serif;\n            }\n            .feedback-header {\n                background: #007bff;\n                color: white;\n                padding: 10px;\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n                border-radius: 6px 6px 0 0;\n            }\n            .feedback-header h3 {\n                margin: 0;\n                font-size: 14px;\n            }\n            .btn-close {\n                background: none;\n                border: none;\n                color: white;\n                font-size: 18px;\n                cursor: pointer;\n                padding: 0;\n                width: 20px;\n                height: 20px;\n            }\n            .feedback-content {\n                padding: 15px;\n                max-height: 200px;\n                overflow-y: auto;\n            }\n            .feedback-stats {\n                background: #f8f9fa;\n                padding: 8px 15px;\n                font-size: 12px;\n                border-radius: 0 0 6px 6px;\n                border-top: 1px solid #dee2e6;\n            }\n            .move-feedback {\n                background: #f8f9fa;\n                border: 1px solid #dee2e6;\n                border-radius: 4px;\n                padding: 10px;\n                margin: 8px 0;\n            }\n            .move-info {\n                font-weight: bold;\n                color: #495057;\n                margin-bottom: 8px;\n            }\n            .feedback-buttons {\n                display: flex;\n                gap: 5px;\n                margin-bottom: 8px;\n            }\n            .feedback-btn {\n                flex: 1;\n                padding: 4px 8px;\n                border: none;\n                border-radius: 3px;\n                cursor: pointer;\n                font-size: 11px;\n            }\n            .btn-good { background: #28a745; color: white; }\n            .btn-bad { background: #dc3545; color: white; }\n            .btn-suggest { background: #ffc107; color: black; }\n            .alternative-cards {\n                display: flex;\n                gap: 5px;\n                flex-wrap: wrap;\n                margin-top: 5px;\n            }\n            .alt-card {\n                background: #007bff;\n                color: white;\n                border: none;\n                padding: 2px 6px;\n                border-radius: 3px;\n                font-size: 10px;\n                cursor: pointer;\n            }\n            .feedback-message {\n                position: fixed;\n                top: 70px;\n                right: 20px;\n                padding: 10px 15px;\n                border-radius: 4px;\n                color: white;\n                font-weight: bold;\n                z-index: 1001;\n                animation: fadeInOut 3s ease-in-out;\n            }\n            .feedback-message.success { background: #28a745; }\n            .feedback-message.warning { background: #dc3545; }\n            .feedback-message.info { background: #17a2b8; }\n            @keyframes fadeInOut {\n                0% { opacity: 0; transform: translateX(100%); }\n                20% { opacity: 1; transform: translateX(0); }\n                80% { opacity: 1; transform: translateX(0); }\n                100% { opacity: 0; transform: translateX(100%); }\n            }\n        `;\n        \n        document.head.appendChild(style);\n        document.body.appendChild(feedbackContainer);\n        \n        this.feedbackUI = feedbackContainer;\n    }\n    \n    /**\n     * Zeigt Feedback-Optionen f√ºr einen Zug\n     */\n    showFeedbackForMove(moveRecord) {\n        const content = document.getElementById('feedback-content');\n        if (!content) return;\n        \n        const moveKey = `trick_${moveRecord.trickNumber}_player_${moveRecord.playerId}`;\n        const playerName = this.getPlayerName(moveRecord.playerId);\n        \n        const moveDiv = document.createElement('div');\n        moveDiv.className = 'move-feedback';\n        moveDiv.innerHTML = `\n            <div class=\"move-info\">\n                ${playerName}: ${moveRecord.selectedCard.suit} ${moveRecord.selectedCard.value}\n            </div>\n            <div class=\"feedback-buttons\">\n                <button class=\"feedback-btn btn-good\" onclick=\"humanFeedback.recordPositiveFeedback('${moveKey}')\">\n                    üëç Gut\n                </button>\n                <button class=\"feedback-btn btn-bad\" onclick=\"humanFeedback.recordNegativeFeedback('${moveKey}')\">\n                    üëé Schlecht\n                </button>\n                <button class=\"feedback-btn btn-suggest\" onclick=\"humanFeedback.showAlternatives('${moveKey}')\">\n                    üí° Besser w√§re...\n                </button>\n            </div>\n            <div class=\"alternative-cards\" id=\"alternatives-${moveKey}\" style=\"display: none;\">\n                ${moveRecord.playableCards.filter(card => \n                    card.suit !== moveRecord.selectedCard.suit || \n                    card.value !== moveRecord.selectedCard.value\n                ).map(card => \n                    `<button class=\"alt-card\" onclick=\"humanFeedback.recordAlternativeSuggestion('${moveKey}', {suit:'${card.suit}', value:'${card.value}'})\">\n                        ${card.suit} ${card.value}\n                    </button>`\n                ).join('')}\n            </div>\n        `;\n        \n        // F√ºge am Anfang hinzu (neueste Z√ºge oben)\n        content.insertBefore(moveDiv, content.firstChild);\n        \n        // Entferne alte Eintr√§ge (max 5)\n        while (content.children.length > 6) { // +1 f√ºr Info-Text\n            content.removeChild(content.lastChild);\n        }\n    }\n    \n    /**\n     * Zeigt alternative Karten f√ºr Vorschlag\n     */\n    showAlternatives(moveKey) {\n        const alternatives = document.getElementById(`alternatives-${moveKey}`);\n        if (alternatives) {\n            alternatives.style.display = alternatives.style.display === 'none' ? 'block' : 'none';\n        }\n    }\n    \n    /**\n     * Zeigt Feedback-Nachricht\n     */\n    showFeedbackMessage(message, type = 'info') {\n        const messageDiv = document.createElement('div');\n        messageDiv.className = `feedback-message ${type}`;\n        messageDiv.textContent = message;\n        \n        document.body.appendChild(messageDiv);\n        \n        // Automatisch entfernen\n        setTimeout(() => {\n            if (messageDiv.parentNode) {\n                messageDiv.parentNode.removeChild(messageDiv);\n            }\n        }, 3000);\n    }\n    \n    /**\n     * Entfernt das Feedback-UI\n     */\n    removeFeedbackUI() {\n        if (this.feedbackUI) {\n            this.feedbackUI.remove();\n            this.feedbackUI = null;\n        }\n    }\n    \n    /**\n     * Hilfsfunktionen\n     */\n    getPlayerName(playerId) {\n        const names = ['Du', 'Anna', 'Bert', 'Clara'];\n        return names[playerId] || `Bot ${playerId}`;\n    }\n    \n    updateFeedbackCount() {\n        const countElement = document.getElementById('feedback-count');\n        if (countElement) {\n            countElement.textContent = this.feedbackHistory.length;\n        }\n    }\n    \n    /**\n     * Statistiken und Analyse\n     */\n    getFeedbackStats() {\n        const stats = {\n            totalFeedback: this.feedbackHistory.length,\n            positive: this.feedbackHistory.filter(f => f.type === 'positive').length,\n            negative: this.feedbackHistory.filter(f => f.type === 'negative').length,\n            suggestions: this.feedbackHistory.filter(f => f.type === 'suggestion').length,\n            byPlayer: {}\n        };\n        \n        // Stats per Player\n        for (const feedback of this.feedbackHistory) {\n            const playerId = feedback.move.playerId;\n            if (!stats.byPlayer[playerId]) {\n                stats.byPlayer[playerId] = { positive: 0, negative: 0, suggestions: 0 };\n            }\n            stats.byPlayer[playerId][feedback.type]++;\n        }\n        \n        return stats;\n    }\n    \n    /**\n     * Export/Import f√ºr Persistierung\n     */\n    exportFeedback() {\n        return {\n            feedbackHistory: this.feedbackHistory,\n            timestamp: Date.now(),\n            version: '1.0'\n        };\n    }\n    \n    importFeedback(data) {\n        if (data && data.feedbackHistory) {\n            this.feedbackHistory = data.feedbackHistory;\n            this.updateFeedbackCount();\n            console.log(`üìÇ ${this.feedbackHistory.length} Feedback-Eintr√§ge geladen`);\n        }\n    }\n    \n    /**\n     * Persistierung\n     */\n    save() {\n        const data = this.exportFeedback();\n        localStorage.setItem('schafkopf_human_feedback', JSON.stringify(data));\n        console.log('üíæ Human Feedback gespeichert');\n    }\n    \n    load() {\n        const saved = localStorage.getItem('schafkopf_human_feedback');\n        if (saved) {\n            try {\n                const data = JSON.parse(saved);\n                this.importFeedback(data);\n                return true;\n            } catch (error) {\n                console.error('‚ùå Fehler beim Laden des Human Feedback:', error);\n            }\n        }\n        return false;\n    }\n}\n\n// Global verf√ºgbar machen\nexport const humanFeedback = new HumanFeedbackLearning();\n\n// Browser-globale Funktionen\nif (typeof window !== 'undefined') {\n    window.humanFeedback = humanFeedback;\n    \n    // Convenience-Funktionen\n    window.enableHumanTraining = () => humanFeedback.enable();\n    window.disableHumanTraining = () => humanFeedback.disable();\n    window.getFeedbackStats = () => humanFeedback.getFeedbackStats();\n    window.saveFeedback = () => humanFeedback.save();\n    window.loadFeedback = () => humanFeedback.load();\n}"